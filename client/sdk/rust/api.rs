// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `api/api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct Endpoint {
    // message fields
    pub name: ::std::string::String,
    pub host: ::protobuf::RepeatedField<::std::string::String>,
    pub path: ::protobuf::RepeatedField<::std::string::String>,
    pub method: ::protobuf::RepeatedField<::std::string::String>,
    pub stream: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Endpoint {
    fn default() -> &'a Endpoint {
        <Endpoint as ::protobuf::Message>::default_instance()
    }
}

impl Endpoint {
    pub fn new() -> Endpoint {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated string host = 2;


    pub fn get_host(&self) -> &[::std::string::String] {
        &self.host
    }
    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.host = v;
    }

    // Mutable pointer to the field.
    pub fn mut_host(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.host, ::protobuf::RepeatedField::new())
    }

    // repeated string path = 3;


    pub fn get_path(&self) -> &[::std::string::String] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.path, ::protobuf::RepeatedField::new())
    }

    // repeated string method = 4;


    pub fn get_method(&self) -> &[::std::string::String] {
        &self.method
    }
    pub fn clear_method(&mut self) {
        self.method.clear();
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.method = v;
    }

    // Mutable pointer to the field.
    pub fn mut_method(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.method
    }

    // Take field
    pub fn take_method(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.method, ::protobuf::RepeatedField::new())
    }

    // bool stream = 5;


    pub fn get_stream(&self) -> bool {
        self.stream
    }
    pub fn clear_stream(&mut self) {
        self.stream = false;
    }

    // Param is passed by value, moved
    pub fn set_stream(&mut self, v: bool) {
        self.stream = v;
    }
}

impl ::protobuf::Message for Endpoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.host)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.path)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.method)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.stream = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.host {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.path {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.method {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.stream != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.host {
            os.write_string(2, &v)?;
        };
        for v in &self.path {
            os.write_string(3, &v)?;
        };
        for v in &self.method {
            os.write_string(4, &v)?;
        };
        if self.stream != false {
            os.write_bool(5, self.stream)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Endpoint {
        Endpoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Endpoint| { &m.name },
                |m: &mut Endpoint| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host",
                |m: &Endpoint| { &m.host },
                |m: &mut Endpoint| { &mut m.host },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &Endpoint| { &m.path },
                |m: &mut Endpoint| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "method",
                |m: &Endpoint| { &m.method },
                |m: &mut Endpoint| { &mut m.method },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "stream",
                |m: &Endpoint| { &m.stream },
                |m: &mut Endpoint| { &mut m.stream },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Endpoint>(
                "Endpoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Endpoint {
        static instance: ::protobuf::rt::LazyV2<Endpoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Endpoint::new)
    }
}

impl ::protobuf::Clear for Endpoint {
    fn clear(&mut self) {
        self.name.clear();
        self.host.clear();
        self.path.clear();
        self.method.clear();
        self.stream = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Endpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Endpoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EmptyResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EmptyResponse {
    fn default() -> &'a EmptyResponse {
        <EmptyResponse as ::protobuf::Message>::default_instance()
    }
}

impl EmptyResponse {
    pub fn new() -> EmptyResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for EmptyResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EmptyResponse {
        EmptyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EmptyResponse>(
                "EmptyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EmptyResponse {
        static instance: ::protobuf::rt::LazyV2<EmptyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EmptyResponse::new)
    }
}

impl ::protobuf::Clear for EmptyResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EmptyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmptyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Pair {
    // message fields
    pub key: ::std::string::String,
    pub values: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Pair {
    fn default() -> &'a Pair {
        <Pair as ::protobuf::Message>::default_instance()
    }
}

impl Pair {
    pub fn new() -> Pair {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // repeated string values = 2;


    pub fn get_values(&self) -> &[::std::string::String] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Pair {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        for value in &self.values {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        for v in &self.values {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Pair {
        Pair::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &Pair| { &m.key },
                |m: &mut Pair| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "values",
                |m: &Pair| { &m.values },
                |m: &mut Pair| { &mut m.values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Pair>(
                "Pair",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Pair {
        static instance: ::protobuf::rt::LazyV2<Pair> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Pair::new)
    }
}

impl ::protobuf::Clear for Pair {
    fn clear(&mut self) {
        self.key.clear();
        self.values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Pair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Pair {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    pub method: ::std::string::String,
    pub path: ::std::string::String,
    pub header: ::std::collections::HashMap<::std::string::String, Pair>,
    pub get: ::std::collections::HashMap<::std::string::String, Pair>,
    pub post: ::std::collections::HashMap<::std::string::String, Pair>,
    pub body: ::std::string::String,
    pub url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // string method = 1;


    pub fn get_method(&self) -> &str {
        &self.method
    }
    pub fn clear_method(&mut self) {
        self.method.clear();
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: ::std::string::String) {
        self.method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method(&mut self) -> &mut ::std::string::String {
        &mut self.method
    }

    // Take field
    pub fn take_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.method, ::std::string::String::new())
    }

    // string path = 2;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // repeated .api.Request.HeaderEntry header = 3;


    pub fn get_header(&self) -> &::std::collections::HashMap<::std::string::String, Pair> {
        &self.header
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: ::std::collections::HashMap<::std::string::String, Pair>) {
        self.header = v;
    }

    // Mutable pointer to the field.
    pub fn mut_header(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Pair> {
        &mut self.header
    }

    // Take field
    pub fn take_header(&mut self) -> ::std::collections::HashMap<::std::string::String, Pair> {
        ::std::mem::replace(&mut self.header, ::std::collections::HashMap::new())
    }

    // repeated .api.Request.GetEntry get = 4;


    pub fn get_get(&self) -> &::std::collections::HashMap<::std::string::String, Pair> {
        &self.get
    }
    pub fn clear_get(&mut self) {
        self.get.clear();
    }

    // Param is passed by value, moved
    pub fn set_get(&mut self, v: ::std::collections::HashMap<::std::string::String, Pair>) {
        self.get = v;
    }

    // Mutable pointer to the field.
    pub fn mut_get(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Pair> {
        &mut self.get
    }

    // Take field
    pub fn take_get(&mut self) -> ::std::collections::HashMap<::std::string::String, Pair> {
        ::std::mem::replace(&mut self.get, ::std::collections::HashMap::new())
    }

    // repeated .api.Request.PostEntry post = 5;


    pub fn get_post(&self) -> &::std::collections::HashMap<::std::string::String, Pair> {
        &self.post
    }
    pub fn clear_post(&mut self) {
        self.post.clear();
    }

    // Param is passed by value, moved
    pub fn set_post(&mut self, v: ::std::collections::HashMap<::std::string::String, Pair>) {
        self.post = v;
    }

    // Mutable pointer to the field.
    pub fn mut_post(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Pair> {
        &mut self.post
    }

    // Take field
    pub fn take_post(&mut self) -> ::std::collections::HashMap<::std::string::String, Pair> {
        ::std::mem::replace(&mut self.post, ::std::collections::HashMap::new())
    }

    // string body = 6;


    pub fn get_body(&self) -> &str {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.body, ::std::string::String::new())
    }

    // string url = 7;


    pub fn get_url(&self) -> &str {
        &self.url
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.method)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(wire_type, is, &mut self.header)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(wire_type, is, &mut self.get)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(wire_type, is, &mut self.post)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.body)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.method.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.method);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(3, &self.header);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(4, &self.get);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(5, &self.post);
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.body);
        }
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.method.is_empty() {
            os.write_string(1, &self.method)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(3, &self.header, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(4, &self.get, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(5, &self.post, os)?;
        if !self.body.is_empty() {
            os.write_string(6, &self.body)?;
        }
        if !self.url.is_empty() {
            os.write_string(7, &self.url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "method",
                |m: &Request| { &m.method },
                |m: &mut Request| { &mut m.method },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &Request| { &m.path },
                |m: &mut Request| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                "header",
                |m: &Request| { &m.header },
                |m: &mut Request| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                "get",
                |m: &Request| { &m.get },
                |m: &mut Request| { &mut m.get },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                "post",
                |m: &Request| { &m.post },
                |m: &mut Request| { &mut m.post },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "body",
                |m: &Request| { &m.body },
                |m: &mut Request| { &mut m.body },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "url",
                |m: &Request| { &m.url },
                |m: &mut Request| { &mut m.url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Request>(
                "Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Request {
        static instance: ::protobuf::rt::LazyV2<Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Request::new)
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.method.clear();
        self.path.clear();
        self.header.clear();
        self.get.clear();
        self.post.clear();
        self.body.clear();
        self.url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub statusCode: i32,
    pub header: ::std::collections::HashMap<::std::string::String, Pair>,
    pub body: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // int32 statusCode = 1;


    pub fn get_statusCode(&self) -> i32 {
        self.statusCode
    }
    pub fn clear_statusCode(&mut self) {
        self.statusCode = 0;
    }

    // Param is passed by value, moved
    pub fn set_statusCode(&mut self, v: i32) {
        self.statusCode = v;
    }

    // repeated .api.Response.HeaderEntry header = 2;


    pub fn get_header(&self) -> &::std::collections::HashMap<::std::string::String, Pair> {
        &self.header
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: ::std::collections::HashMap<::std::string::String, Pair>) {
        self.header = v;
    }

    // Mutable pointer to the field.
    pub fn mut_header(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Pair> {
        &mut self.header
    }

    // Take field
    pub fn take_header(&mut self) -> ::std::collections::HashMap<::std::string::String, Pair> {
        ::std::mem::replace(&mut self.header, ::std::collections::HashMap::new())
    }

    // string body = 3;


    pub fn get_body(&self) -> &str {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.body, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.statusCode = tmp;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(wire_type, is, &mut self.header)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.statusCode != 0 {
            my_size += ::protobuf::rt::value_size(1, self.statusCode, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(2, &self.header);
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.statusCode != 0 {
            os.write_int32(1, self.statusCode)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(2, &self.header, os)?;
        if !self.body.is_empty() {
            os.write_string(3, &self.body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "statusCode",
                |m: &Response| { &m.statusCode },
                |m: &mut Response| { &mut m.statusCode },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                "header",
                |m: &Response| { &m.header },
                |m: &mut Response| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "body",
                |m: &Response| { &m.body },
                |m: &mut Response| { &mut m.body },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Response>(
                "Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Response {
        static instance: ::protobuf::rt::LazyV2<Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Response::new)
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.statusCode = 0;
        self.header.clear();
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rapi/api.proto\x12\x03api\"v\n\x08Endpoint\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x12\x12\n\x04host\x18\x02\x20\x03(\tR\x04host\x12\
    \x12\n\x04path\x18\x03\x20\x03(\tR\x04path\x12\x16\n\x06method\x18\x04\
    \x20\x03(\tR\x06method\x12\x16\n\x06stream\x18\x05\x20\x01(\x08R\x06stre\
    am\"\x0f\n\rEmptyResponse\"0\n\x04Pair\x12\x10\n\x03key\x18\x01\x20\x01(\
    \tR\x03key\x12\x16\n\x06values\x18\x02\x20\x03(\tR\x06values\"\xaf\x03\n\
    \x07Request\x12\x16\n\x06method\x18\x01\x20\x01(\tR\x06method\x12\x12\n\
    \x04path\x18\x02\x20\x01(\tR\x04path\x120\n\x06header\x18\x03\x20\x03(\
    \x0b2\x18.api.Request.HeaderEntryR\x06header\x12'\n\x03get\x18\x04\x20\
    \x03(\x0b2\x15.api.Request.GetEntryR\x03get\x12*\n\x04post\x18\x05\x20\
    \x03(\x0b2\x16.api.Request.PostEntryR\x04post\x12\x12\n\x04body\x18\x06\
    \x20\x01(\tR\x04body\x12\x10\n\x03url\x18\x07\x20\x01(\tR\x03url\x1aD\n\
    \x0bHeaderEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x1f\n\
    \x05value\x18\x02\x20\x01(\x0b2\t.api.PairR\x05value:\x028\x01\x1aA\n\
    \x08GetEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x1f\n\x05va\
    lue\x18\x02\x20\x01(\x0b2\t.api.PairR\x05value:\x028\x01\x1aB\n\tPostEnt\
    ry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x1f\n\x05value\x18\
    \x02\x20\x01(\x0b2\t.api.PairR\x05value:\x028\x01\"\xb7\x01\n\x08Respons\
    e\x12\x1e\n\nstatusCode\x18\x01\x20\x01(\x05R\nstatusCode\x121\n\x06head\
    er\x18\x02\x20\x03(\x0b2\x19.api.Response.HeaderEntryR\x06header\x12\x12\
    \n\x04body\x18\x03\x20\x01(\tR\x04body\x1aD\n\x0bHeaderEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x1f\n\x05value\x18\x02\x20\x01(\
    \x0b2\t.api.PairR\x05value:\x028\x012i\n\x03Api\x12/\n\x08Register\x12\r\
    .api.Endpoint\x1a\x12.api.EmptyResponse\"\0\x121\n\nDeregister\x12\r.api\
    .Endpoint\x1a\x12.api.EmptyResponse\"\0B)Z'github.com/micro/micro/v3/pro\
    to/api;apiJ\x9e\x0c\n\x06\x12\x04\0\0(\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0b\n\x08\n\x01\x08\x12\x03\x04\0>\
    \n\t\n\x02\x08\x0b\x12\x03\x04\0>\n\n\n\x02\x06\0\x12\x04\x06\0\t\x01\n\
    \n\n\x03\x06\0\x01\x12\x03\x06\x08\x0b\n\x0b\n\x04\x06\0\x02\0\x12\x03\
    \x07\x023\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x07\x06\x0e\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\x07\x0f\x17\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x07\"/\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x08\x025\n\x0c\n\x05\x06\0\x02\
    \x01\x01\x12\x03\x08\x06\x10\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x08\
    \x11\x19\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x08$1\n\n\n\x02\x04\0\x12\
    \x04\x0b\0\x11\x01\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\x10\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x0c\x02\x12\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x0c\
    \x02\x0b\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0c\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0c\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c\
    \x10\x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\r\x02\x1b\n\x0c\n\x05\x04\0\
    \x02\x01\x04\x12\x03\r\x02\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\r\x0b\
    \x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\x12\x16\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\r\x19\x1a\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0e\x02\
    \x1b\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x0e\x02\n\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03\x0e\x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\
    \x0e\x12\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0e\x19\x1a\n\x0b\n\
    \x04\x04\0\x02\x03\x12\x03\x0f\x02\x1d\n\x0c\n\x05\x04\0\x02\x03\x04\x12\
    \x03\x0f\x02\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0f\x0b\x11\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x03\x0f\x12\x18\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\x0f\x1b\x1c\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x10\x02\x12\n\r\n\
    \x05\x04\0\x02\x04\x04\x12\x04\x10\x02\x0f\x1d\n\x0c\n\x05\x04\0\x02\x04\
    \x05\x12\x03\x10\x02\x06\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x10\x07\r\
    \n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x10\x10\x11\n\t\n\x02\x04\x01\x12\
    \x03\x13\0\x18\n\n\n\x03\x04\x01\x01\x12\x03\x13\x08\x15\n\n\n\x02\x04\
    \x02\x12\x04\x15\0\x18\x01\n\n\n\x03\x04\x02\x01\x12\x03\x15\x08\x0c\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03\x16\x08\x17\n\r\n\x05\x04\x02\x02\0\x04\
    \x12\x04\x16\x08\x15\x0e\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x16\x08\
    \x0e\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x16\x0f\x12\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x16\x15\x16\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\
    \x17\x08#\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x17\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03\x17\x11\x17\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x17\x18\x1e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x17!\"\
    \n\n\n\x02\x04\x03\x12\x04\x1a\0\"\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1a\
    \x08\x0f\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1b\x08\x1a\n\r\n\x05\x04\x03\
    \x02\0\x04\x12\x04\x1b\x08\x1a\x11\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\
    \x1b\x08\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1b\x0f\x15\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03\x1b\x18\x19\n\x0b\n\x04\x04\x03\x02\x01\
    \x12\x03\x1c\x08\x18\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x1c\x08\x1b\
    \x1a\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x1c\x08\x0e\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03\x1c\x0f\x13\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03\x1c\x16\x17\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x1d\x08%\n\r\n\x05\
    \x04\x03\x02\x02\x04\x12\x04\x1d\x08\x1c\x18\n\x0c\n\x05\x04\x03\x02\x02\
    \x06\x12\x03\x1d\x08\x19\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x1d\x1a\
    \x20\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x1d#$\n\x0b\n\x04\x04\x03\
    \x02\x03\x12\x03\x1e\x08\"\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04\x1e\x08\
    \x1d%\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\x03\x1e\x08\x19\n\x0c\n\x05\
    \x04\x03\x02\x03\x01\x12\x03\x1e\x1a\x1d\n\x0c\n\x05\x04\x03\x02\x03\x03\
    \x12\x03\x1e\x20!\n\x0b\n\x04\x04\x03\x02\x04\x12\x03\x1f\x08#\n\r\n\x05\
    \x04\x03\x02\x04\x04\x12\x04\x1f\x08\x1e\"\n\x0c\n\x05\x04\x03\x02\x04\
    \x06\x12\x03\x1f\x08\x19\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03\x1f\x1a\
    \x1e\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03\x1f!\"\nI\n\x04\x04\x03\x02\
    \x05\x12\x03\x20\x08\x18\"<\x20raw\x20request\x20body;\x20if\x20not\x20a\
    pplication/x-www-form-urlencoded\n\n\r\n\x05\x04\x03\x02\x05\x04\x12\x04\
    \x20\x08\x1f#\n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x03\x20\x08\x0e\n\x0c\
    \n\x05\x04\x03\x02\x05\x01\x12\x03\x20\x0f\x13\n\x0c\n\x05\x04\x03\x02\
    \x05\x03\x12\x03\x20\x16\x17\n\x1b\n\x04\x04\x03\x02\x06\x12\x03!\x08\
    \x17\"\x0e\x20the\x20full\x20url\n\n\r\n\x05\x04\x03\x02\x06\x04\x12\x04\
    !\x08\x20\x18\n\x0c\n\x05\x04\x03\x02\x06\x05\x12\x03!\x08\x0e\n\x0c\n\
    \x05\x04\x03\x02\x06\x01\x12\x03!\x0f\x12\n\x0c\n\x05\x04\x03\x02\x06\
    \x03\x12\x03!\x15\x16\n\n\n\x02\x04\x04\x12\x04$\0(\x01\n\n\n\x03\x04\
    \x04\x01\x12\x03$\x08\x10\n\x0b\n\x04\x04\x04\x02\0\x12\x03%\x08\x1d\n\r\
    \n\x05\x04\x04\x02\0\x04\x12\x04%\x08$\x12\n\x0c\n\x05\x04\x04\x02\0\x05\
    \x12\x03%\x08\r\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03%\x0e\x18\n\x0c\n\
    \x05\x04\x04\x02\0\x03\x12\x03%\x1b\x1c\n\x0b\n\x04\x04\x04\x02\x01\x12\
    \x03&\x08%\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04&\x08%\x1d\n\x0c\n\x05\
    \x04\x04\x02\x01\x06\x12\x03&\x08\x19\n\x0c\n\x05\x04\x04\x02\x01\x01\
    \x12\x03&\x1a\x20\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03&#$\n\x0b\n\x04\
    \x04\x04\x02\x02\x12\x03'\x08\x18\n\r\n\x05\x04\x04\x02\x02\x04\x12\x04'\
    \x08&%\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03'\x08\x0e\n\x0c\n\x05\x04\
    \x04\x02\x02\x01\x12\x03'\x0f\x13\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\
    \x03'\x16\x17b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
