// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service/auth/proto/auth.proto

package auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
	microClient "github.com/micro/micro/v3/service/client"
	microServer "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ = microServer.Handle
var _ = microClient.Call

// Api Endpoints for Auth service

func NewAuthEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Auth service

type AuthService interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...client.CallOption) (*GenerateResponse, error)
	Inspect(ctx context.Context, in *InspectRequest, opts ...client.CallOption) (*InspectResponse, error)
	Token(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error)
}

type authService struct {
	name string
}

func NewAuthService(name string) AuthService {
	return &authService{name: name}
}

func (c *authService) Generate(ctx context.Context, in *GenerateRequest, opts ...client.CallOption) (*GenerateResponse, error) {
	req := microClient.NewRequest(c.name, "Auth.Generate", in)
	out := new(GenerateResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Inspect(ctx context.Context, in *InspectRequest, opts ...client.CallOption) (*InspectResponse, error) {
	req := microClient.NewRequest(c.name, "Auth.Inspect", in)
	out := new(InspectResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Token(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error) {
	req := microClient.NewRequest(c.name, "Auth.Token", in)
	out := new(TokenResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	Generate(context.Context, *GenerateRequest, *GenerateResponse) error
	Inspect(context.Context, *InspectRequest, *InspectResponse) error
	Token(context.Context, *TokenRequest, *TokenResponse) error
}

func RegisterAuthHandler(hdlr AuthHandler, opts ...server.HandlerOption) error {
	type auth interface {
		Generate(ctx context.Context, in *GenerateRequest, out *GenerateResponse) error
		Inspect(ctx context.Context, in *InspectRequest, out *InspectResponse) error
		Token(ctx context.Context, in *TokenRequest, out *TokenResponse) error
	}
	type Auth struct {
		auth
	}
	h := &authHandler{hdlr}
	return microServer.Handle(microServer.NewHandler(&Auth{h}, opts...))
}

type authHandler struct {
	AuthHandler
}

func (h *authHandler) Generate(ctx context.Context, in *GenerateRequest, out *GenerateResponse) error {
	return h.AuthHandler.Generate(ctx, in, out)
}

func (h *authHandler) Inspect(ctx context.Context, in *InspectRequest, out *InspectResponse) error {
	return h.AuthHandler.Inspect(ctx, in, out)
}

func (h *authHandler) Token(ctx context.Context, in *TokenRequest, out *TokenResponse) error {
	return h.AuthHandler.Token(ctx, in, out)
}

// Api Endpoints for Accounts service

func NewAccountsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Accounts service

type AccountsService interface {
	List(ctx context.Context, in *ListAccountsRequest, opts ...client.CallOption) (*ListAccountsResponse, error)
	Delete(ctx context.Context, in *DeleteAccountRequest, opts ...client.CallOption) (*DeleteAccountResponse, error)
}

type accountsService struct {
	name string
}

func NewAccountsService(name string) AccountsService {
	return &accountsService{name: name}
}

func (c *accountsService) List(ctx context.Context, in *ListAccountsRequest, opts ...client.CallOption) (*ListAccountsResponse, error) {
	req := microClient.NewRequest(c.name, "Accounts.List", in)
	out := new(ListAccountsResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) Delete(ctx context.Context, in *DeleteAccountRequest, opts ...client.CallOption) (*DeleteAccountResponse, error) {
	req := microClient.NewRequest(c.name, "Accounts.Delete", in)
	out := new(DeleteAccountResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Accounts service

type AccountsHandler interface {
	List(context.Context, *ListAccountsRequest, *ListAccountsResponse) error
	Delete(context.Context, *DeleteAccountRequest, *DeleteAccountResponse) error
}

func RegisterAccountsHandler(hdlr AccountsHandler, opts ...server.HandlerOption) error {
	type accounts interface {
		List(ctx context.Context, in *ListAccountsRequest, out *ListAccountsResponse) error
		Delete(ctx context.Context, in *DeleteAccountRequest, out *DeleteAccountResponse) error
	}
	type Accounts struct {
		accounts
	}
	h := &accountsHandler{hdlr}
	return microServer.Handle(microServer.NewHandler(&Accounts{h}, opts...))
}

type accountsHandler struct {
	AccountsHandler
}

func (h *accountsHandler) List(ctx context.Context, in *ListAccountsRequest, out *ListAccountsResponse) error {
	return h.AccountsHandler.List(ctx, in, out)
}

func (h *accountsHandler) Delete(ctx context.Context, in *DeleteAccountRequest, out *DeleteAccountResponse) error {
	return h.AccountsHandler.Delete(ctx, in, out)
}

// Api Endpoints for Rules service

func NewRulesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Rules service

type RulesService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
}

type rulesService struct {
	name string
}

func NewRulesService(name string) RulesService {
	return &rulesService{name: name}
}

func (c *rulesService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := microClient.NewRequest(c.name, "Rules.Create", in)
	out := new(CreateResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := microClient.NewRequest(c.name, "Rules.Delete", in)
	out := new(DeleteResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := microClient.NewRequest(c.name, "Rules.List", in)
	out := new(ListResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rules service

type RulesHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
}

func RegisterRulesHandler(hdlr RulesHandler, opts ...server.HandlerOption) error {
	type rules interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
	}
	type Rules struct {
		rules
	}
	h := &rulesHandler{hdlr}
	return microServer.Handle(microServer.NewHandler(&Rules{h}, opts...))
}

type rulesHandler struct {
	RulesHandler
}

func (h *rulesHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.RulesHandler.Create(ctx, in, out)
}

func (h *rulesHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.RulesHandler.Delete(ctx, in, out)
}

func (h *rulesHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.RulesHandler.List(ctx, in, out)
}
